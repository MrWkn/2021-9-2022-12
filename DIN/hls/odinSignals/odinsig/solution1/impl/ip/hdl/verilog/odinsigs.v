// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="odinsigs_odinsigs,hls_ip_2021_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=623,HLS_SYN_LUT=510,HLS_VERSION=2021_1}" *)

module odinsigs (
        ap_clk,
        ap_rst_n,
        AEROUT_ADDR,
        AEROUT_REQ,
        AEROUT_ACK,
        CTRL_SCHED_POP_N,
        CTRL_NEURMEM_ADDR,
        AEROUT_CTRL_BUSY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] AEROUT_ADDR;
input  [31:0] AEROUT_REQ;
output  [31:0] AEROUT_ACK;
input  [31:0] CTRL_SCHED_POP_N;
input  [31:0] CTRL_NEURMEM_ADDR;
input  [31:0] AEROUT_CTRL_BUSY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] addr_o_1_data_reg;
reg    addr_o_1_vld_reg;
reg    addr_o_1_vld_in;
reg    addr_o_1_ack_in;
reg   [31:0] req_o_1_data_reg;
reg    req_o_1_vld_reg;
reg    req_o_1_vld_in;
reg    req_o_1_ack_in;
wire   [31:0] ack_o;
reg   [31:0] ack_o_0_data_reg;
reg    ack_o_0_vld_reg;
reg    ack_o_0_ack_out;
reg   [31:0] AEROUT_ADDR_0_data_reg;
reg    AEROUT_ADDR_0_vld_reg;
reg    AEROUT_ADDR_0_ack_out;
reg   [31:0] AEROUT_REQ_0_data_reg;
reg    AEROUT_REQ_0_vld_reg;
reg    AEROUT_REQ_0_ack_out;
reg   [31:0] AEROUT_ACK_1_data_reg;
reg    AEROUT_ACK_1_vld_reg;
reg    AEROUT_ACK_1_vld_in;
reg    AEROUT_ACK_1_ack_in;
wire   [31:0] writeloc;
reg   [31:0] pop_n_1_data_reg;
reg    pop_n_1_vld_reg;
reg    pop_n_1_vld_in;
reg    pop_n_1_ack_in;
reg   [31:0] postneuron_1_data_reg;
reg    postneuron_1_vld_reg;
reg    postneuron_1_vld_in;
reg    postneuron_1_ack_in;
reg   [31:0] CTRL_SCHED_POP_N_0_data_reg;
reg    CTRL_SCHED_POP_N_0_vld_reg;
reg    CTRL_SCHED_POP_N_0_ack_out;
reg   [31:0] CTRL_NEURMEM_ADDR_0_data_reg;
reg    CTRL_NEURMEM_ADDR_0_vld_reg;
reg    CTRL_NEURMEM_ADDR_0_ack_out;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 addr_o_1_data_reg = 32'd0;
#0 addr_o_1_vld_reg = 1'b0;
#0 req_o_1_data_reg = 32'd0;
#0 req_o_1_vld_reg = 1'b0;
#0 ack_o_0_data_reg = 32'd0;
#0 ack_o_0_vld_reg = 1'b0;
#0 AEROUT_ADDR_0_data_reg = 32'd0;
#0 AEROUT_ADDR_0_vld_reg = 1'b0;
#0 AEROUT_REQ_0_data_reg = 32'd0;
#0 AEROUT_REQ_0_vld_reg = 1'b0;
#0 AEROUT_ACK_1_data_reg = 32'd0;
#0 AEROUT_ACK_1_vld_reg = 1'b0;
#0 pop_n_1_data_reg = 32'd0;
#0 pop_n_1_vld_reg = 1'b0;
#0 postneuron_1_data_reg = 32'd0;
#0 postneuron_1_vld_reg = 1'b0;
#0 CTRL_SCHED_POP_N_0_data_reg = 32'd0;
#0 CTRL_SCHED_POP_N_0_vld_reg = 1'b0;
#0 CTRL_NEURMEM_ADDR_0_data_reg = 32'd0;
#0 CTRL_NEURMEM_ADDR_0_vld_reg = 1'b0;
end

odinsigs_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd1),
    .addr_o(addr_o_1_data_reg),
    .addr_o_ap_vld(addr_o_1_vld_reg),
    .req_o(req_o_1_data_reg),
    .req_o_ap_vld(req_o_1_vld_reg),
    .ack_o(ack_o),
    .writeloc(writeloc),
    .pop_n(pop_n_1_data_reg),
    .pop_n_ap_vld(pop_n_1_vld_reg),
    .postneuron(postneuron_1_data_reg),
    .postneuron_ap_vld(postneuron_1_vld_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == addr_o_1_vld_reg) & (1'b1 == addr_o_1_vld_in))) begin
        addr_o_1_vld_reg <= 1'b1;
    end else if (((1'b0 == addr_o_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == addr_o_1_vld_reg))) begin
        addr_o_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (pop_n_1_vld_in == 1'b1) & (pop_n_1_vld_reg == 1'b0))) begin
        pop_n_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (pop_n_1_vld_in == 1'b0) & (pop_n_1_vld_reg == 1'b1))) begin
        pop_n_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (postneuron_1_vld_in == 1'b1) & (postneuron_1_vld_reg == 1'b0))) begin
        postneuron_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (postneuron_1_vld_in == 1'b0) & (postneuron_1_vld_reg == 1'b1))) begin
        postneuron_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (req_o_1_vld_in == 1'b1) & (req_o_1_vld_reg == 1'b0))) begin
        req_o_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (req_o_1_vld_in == 1'b0) & (req_o_1_vld_reg == 1'b1))) begin
        req_o_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (1'b1 == AEROUT_ACK_1_vld_in) & (1'b1 == AEROUT_ACK_1_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == AEROUT_ACK_1_vld_reg) & (1'b1 == AEROUT_ACK_1_vld_in)))) begin
        AEROUT_ACK_1_data_reg <= ack_o_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == AEROUT_ADDR_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == AEROUT_ADDR_0_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == AEROUT_ADDR_0_vld_reg) & (1'b1 == 1'b1)))) begin
        AEROUT_ADDR_0_data_reg <= AEROUT_ADDR;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == AEROUT_REQ_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == AEROUT_REQ_0_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == AEROUT_REQ_0_vld_reg) & (1'b1 == 1'b1)))) begin
        AEROUT_REQ_0_data_reg <= AEROUT_REQ;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == CTRL_NEURMEM_ADDR_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == CTRL_NEURMEM_ADDR_0_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == CTRL_NEURMEM_ADDR_0_vld_reg) & (1'b1 == 1'b1)))) begin
        CTRL_NEURMEM_ADDR_0_data_reg <= CTRL_NEURMEM_ADDR;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == CTRL_SCHED_POP_N_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == CTRL_SCHED_POP_N_0_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == CTRL_SCHED_POP_N_0_vld_reg) & (1'b1 == 1'b1)))) begin
        CTRL_SCHED_POP_N_0_data_reg <= CTRL_SCHED_POP_N;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == ack_o_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == ack_o_0_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == ack_o_0_vld_reg) & (1'b1 == 1'b1)))) begin
        ack_o_0_data_reg <= ack_o;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (1'b1 == addr_o_1_vld_in) & (1'b1 == addr_o_1_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == addr_o_1_vld_reg) & (1'b1 == addr_o_1_vld_in)))) begin
        addr_o_1_data_reg <= AEROUT_ADDR_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (pop_n_1_vld_in == 1'b1) & (pop_n_1_vld_reg == 1'b1)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (pop_n_1_vld_in == 1'b1) & (pop_n_1_vld_reg == 1'b0)))) begin
        pop_n_1_data_reg <= CTRL_SCHED_POP_N_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (postneuron_1_vld_in == 1'b1) & (postneuron_1_vld_reg == 1'b1)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (postneuron_1_vld_in == 1'b1) & (postneuron_1_vld_reg == 1'b0)))) begin
        postneuron_1_data_reg <= CTRL_NEURMEM_ADDR_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (req_o_1_vld_in == 1'b1) & (req_o_1_vld_reg == 1'b1)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (req_o_1_vld_in == 1'b1) & (req_o_1_vld_reg == 1'b0)))) begin
        req_o_1_data_reg <= AEROUT_REQ_0_data_reg;
    end
end

always @ (*) begin
    if (((1'b0 == AEROUT_ACK_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == AEROUT_ACK_1_vld_reg)))) begin
        AEROUT_ACK_1_ack_in = 1'b1;
    end else begin
        AEROUT_ACK_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AEROUT_ACK_1_vld_in = 1'b1;
    end else begin
        AEROUT_ACK_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        AEROUT_ADDR_0_ack_out = 1'b1;
    end else begin
        AEROUT_ADDR_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        AEROUT_REQ_0_ack_out = 1'b1;
    end else begin
        AEROUT_REQ_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        CTRL_NEURMEM_ADDR_0_ack_out = 1'b1;
    end else begin
        CTRL_NEURMEM_ADDR_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        CTRL_SCHED_POP_N_0_ack_out = 1'b1;
    end else begin
        CTRL_SCHED_POP_N_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        ack_o_0_ack_out = 1'b1;
    end else begin
        ack_o_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == addr_o_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == addr_o_1_vld_reg)))) begin
        addr_o_1_ack_in = 1'b1;
    end else begin
        addr_o_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        addr_o_1_vld_in = 1'b1;
    end else begin
        addr_o_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((pop_n_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (pop_n_1_vld_reg == 1'b1)))) begin
        pop_n_1_ack_in = 1'b1;
    end else begin
        pop_n_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pop_n_1_vld_in = 1'b1;
    end else begin
        pop_n_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((postneuron_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (postneuron_1_vld_reg == 1'b1)))) begin
        postneuron_1_ack_in = 1'b1;
    end else begin
        postneuron_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        postneuron_1_vld_in = 1'b1;
    end else begin
        postneuron_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((req_o_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (req_o_1_vld_reg == 1'b1)))) begin
        req_o_1_ack_in = 1'b1;
    end else begin
        req_o_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        req_o_1_vld_in = 1'b1;
    end else begin
        req_o_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AEROUT_ACK = AEROUT_ACK_1_data_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((req_o_1_ack_in == 1'b0) | (1'b0 == addr_o_1_ack_in) | (1'b0 == AEROUT_ACK_1_ack_in) | (postneuron_1_ack_in == 1'b0) | (pop_n_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //odinsigs
